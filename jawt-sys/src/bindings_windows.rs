/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use jni_sys::*;
use windows_sys::Win32::Foundation::HWND;
use windows_sys::Win32::Graphics::Gdi::{HBITMAP, HDC, HPALETTE};

pub const JAWT_LOCK_ERROR: u32 = 1;
pub const JAWT_LOCK_CLIP_CHANGED: u32 = 2;
pub const JAWT_LOCK_BOUNDS_CHANGED: u32 = 4;
pub const JAWT_LOCK_SURFACE_CHANGED: u32 = 8;
pub const JAWT_VERSION_1_3: u32 = 65539;
pub const JAWT_VERSION_1_4: u32 = 65540;
pub const JAWT_VERSION_1_7: u32 = 65543;
pub const JAWT_VERSION_9: u32 = 589824;
#[repr(C)]
pub struct jawt_Rectangle {
    pub x: jint,
    pub y: jint,
    pub width: jint,
    pub height: jint,
}
#[test]
fn bindgen_test_layout_jawt_Rectangle() {
    const UNINIT: ::std::mem::MaybeUninit<jawt_Rectangle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jawt_Rectangle>(),
        16usize,
        concat!("Size of: ", stringify!(jawt_Rectangle))
    );
    assert_eq!(
        ::std::mem::align_of::<jawt_Rectangle>(),
        4usize,
        concat!("Alignment of ", stringify!(jawt_Rectangle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Rectangle),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Rectangle),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Rectangle),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Rectangle),
            "::",
            stringify!(height)
        )
    );
}
pub type JAWT_Rectangle = jawt_Rectangle;
#[repr(C)]
pub struct jawt_DrawingSurfaceInfo {
    pub platformInfo: *mut ::std::os::raw::c_void,
    pub ds: *mut jawt_DrawingSurface,
    pub bounds: JAWT_Rectangle,
    pub clipSize: jint,
    pub clip: *mut JAWT_Rectangle,
}
#[test]
fn bindgen_test_layout_jawt_DrawingSurfaceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jawt_DrawingSurfaceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jawt_DrawingSurfaceInfo>(),
        48usize,
        concat!("Size of: ", stringify!(jawt_DrawingSurfaceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jawt_DrawingSurfaceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jawt_DrawingSurfaceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platformInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurfaceInfo),
            "::",
            stringify!(platformInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurfaceInfo),
            "::",
            stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurfaceInfo),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurfaceInfo),
            "::",
            stringify!(clipSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurfaceInfo),
            "::",
            stringify!(clip)
        )
    );
}
pub type JAWT_DrawingSurfaceInfo = jawt_DrawingSurfaceInfo;
#[repr(C)]
pub struct jawt_DrawingSurface {
    pub env: *mut JNIEnv,
    pub target: jobject,
    pub Lock: ::std::option::Option<unsafe extern "C" fn(ds: *mut jawt_DrawingSurface) -> jint>,
    pub GetDrawingSurfaceInfo: ::std::option::Option<
        unsafe extern "C" fn(ds: *mut jawt_DrawingSurface) -> *mut JAWT_DrawingSurfaceInfo,
    >,
    pub FreeDrawingSurfaceInfo:
        ::std::option::Option<unsafe extern "C" fn(dsi: *mut JAWT_DrawingSurfaceInfo)>,
    pub Unlock: ::std::option::Option<unsafe extern "C" fn(ds: *mut jawt_DrawingSurface)>,
}
#[test]
fn bindgen_test_layout_jawt_DrawingSurface() {
    const UNINIT: ::std::mem::MaybeUninit<jawt_DrawingSurface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jawt_DrawingSurface>(),
        48usize,
        concat!("Size of: ", stringify!(jawt_DrawingSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<jawt_DrawingSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(jawt_DrawingSurface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).env) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurface),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurface),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurface),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDrawingSurfaceInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurface),
            "::",
            stringify!(GetDrawingSurfaceInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeDrawingSurfaceInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurface),
            "::",
            stringify!(FreeDrawingSurfaceInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Unlock) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_DrawingSurface),
            "::",
            stringify!(Unlock)
        )
    );
}
pub type JAWT_DrawingSurface = jawt_DrawingSurface;
#[repr(C)]
pub struct jawt {
    pub version: jint,
    pub GetDrawingSurface: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, target: jobject) -> *mut JAWT_DrawingSurface,
    >,
    pub FreeDrawingSurface:
        ::std::option::Option<unsafe extern "C" fn(ds: *mut JAWT_DrawingSurface)>,
    pub Lock: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv)>,
    pub Unlock: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv)>,
    pub GetComponent: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            platformInfo: *mut ::std::os::raw::c_void,
        ) -> jobject,
    >,
    #[doc = " Since 9\n Creates a java.awt.Frame placed in a native container. Container is\n referenced by the native platform handle. For example on Windows this\n corresponds to an HWND. For other platforms, see the appropriate\n machine-dependent header file for a description. The reference returned\n by this function is a local reference that is only valid in this\n environment. This function returns a NULL reference if no frame could be\n created with matching platform information."]
    pub CreateEmbeddedFrame: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            platformInfo: *mut ::std::os::raw::c_void,
        ) -> jobject,
    >,
    #[doc = " Since 9\n Moves and resizes the embedded frame. The new location of the top-left\n corner is specified by x and y parameters relative to the native parent\n component. The new size is specified by width and height.\n\n The embedded frame should be created by CreateEmbeddedFrame() method, or\n this function will not have any effect.\n\n java.awt.Component.setLocation() and java.awt.Component.setBounds() for\n EmbeddedFrame really don't move it within the native parent. These\n methods always locate the embedded frame at (0, 0) for backward\n compatibility. To allow moving embedded frames this method was\n introduced, and it works just the same way as setLocation() and\n setBounds() for usual, non-embedded components.\n\n Using usual get/setLocation() and get/setBounds() together with this new\n method is not recommended."]
    pub SetBounds: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            embeddedFrame: jobject,
            x: jint,
            y: jint,
            w: jint,
            h: jint,
        ),
    >,
    #[doc = " Since 9\n Synthesize a native message to activate or deactivate an EmbeddedFrame\n window depending on the value of parameter doActivate, if \"true\"\n activates the window; otherwise, deactivates the window.\n\n The embedded frame should be created by CreateEmbeddedFrame() method, or\n this function will not have any effect."]
    pub SynthesizeWindowActivation: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, embeddedFrame: jobject, doActivate: jboolean),
    >,
}
#[test]
fn bindgen_test_layout_jawt() {
    const UNINIT: ::std::mem::MaybeUninit<jawt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jawt>(),
        72usize,
        concat!("Size of: ", stringify!(jawt))
    );
    assert_eq!(
        ::std::mem::align_of::<jawt>(),
        8usize,
        concat!("Alignment of ", stringify!(jawt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDrawingSurface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(GetDrawingSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeDrawingSurface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(FreeDrawingSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(Lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Unlock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(Unlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetComponent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(GetComponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateEmbeddedFrame) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(CreateEmbeddedFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBounds) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(SetBounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SynthesizeWindowActivation) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt),
            "::",
            stringify!(SynthesizeWindowActivation)
        )
    );
}
pub type JAWT = jawt;
extern "C" {
    pub fn JAWT_GetAWT(env: *mut JNIEnv, awt: *mut JAWT) -> jboolean;
}




#[repr(C)]
#[derive(Copy, Clone)]
pub struct jawt_Win32DrawingSurfaceInfo {
    pub __bindgen_anon_1: jawt_Win32DrawingSurfaceInfo__bindgen_ty_1,
    pub hdc: HDC,
    pub hpalette: HPALETTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jawt_Win32DrawingSurfaceInfo__bindgen_ty_1 {
    pub hwnd: HWND,
    pub hbitmap: HBITMAP,
    pub pbits: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_jawt_Win32DrawingSurfaceInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<jawt_Win32DrawingSurfaceInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jawt_Win32DrawingSurfaceInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(jawt_Win32DrawingSurfaceInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<jawt_Win32DrawingSurfaceInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(jawt_Win32DrawingSurfaceInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hwnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Win32DrawingSurfaceInfo__bindgen_ty_1),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hbitmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Win32DrawingSurfaceInfo__bindgen_ty_1),
            "::",
            stringify!(hbitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Win32DrawingSurfaceInfo__bindgen_ty_1),
            "::",
            stringify!(pbits)
        )
    );
}
#[test]
fn bindgen_test_layout_jawt_Win32DrawingSurfaceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jawt_Win32DrawingSurfaceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jawt_Win32DrawingSurfaceInfo>(),
        24usize,
        concat!("Size of: ", stringify!(jawt_Win32DrawingSurfaceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jawt_Win32DrawingSurfaceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jawt_Win32DrawingSurfaceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Win32DrawingSurfaceInfo),
            "::",
            stringify!(hdc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpalette) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jawt_Win32DrawingSurfaceInfo),
            "::",
            stringify!(hpalette)
        )
    );
}
pub type JAWT_Win32DrawingSurfaceInfo = jawt_Win32DrawingSurfaceInfo;
